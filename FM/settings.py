"""
Sync test
Django settings for FM project.

Generated by 'django-admin startproject' using Django 3.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

from pathlib import Path
import os
import dj_database_url
from .config import Config


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = Config.SECRET_KEY

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'myapi.apps.MyapiConfig',
    'rest_framework',
    'storages',
]

MIDDLEWARE = [
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'FM.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['myapi/templates/', 'templates' ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'FM.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE':   'django.db.backends.postgresql_psycopg2',
        'NAME':     Config.SECRET_NAME,
        'USER':     Config.SECRET_USER,
        'PASSWORD': Config.SECRET_PASSWORD,
        'HOST':     Config.SECRET_HOST,
        'PORT':     '5432',
    }
}


#db_from_env = dj_database_url.config()
#DATABASES['default'].update(db_from_env)


# Password validation HERE
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# AWS CREDENCIALS # AWS CREDENCIALS # AWS CREDENCIALS

AWS_ACCESS_KEY_ID       = Config.AWS_ACCESS_KEY_ID
AWS_SECRET_ACCESS_KEY   = Config.AWS_SECRET_ACCESS_KEY

AWS_STORAGE_BUCKET_NAME = Config.AWS_STORAGE_BUCKET_NAME

AWS_S3_FILE_OVERWRITE = False
AWS_DEFAULT_ACL = None
DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'

AWS_S3_CUSTOM_DOMAIN = '%s.s3.amazonaws.com' % AWS_STORAGE_BUCKET_NAME
AWS_LOCATION = 'documents'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, '/documents'),
]
STATIC_URL = 'https://%s/%s/' % (AWS_S3_CUSTOM_DOMAIN, AWS_LOCATION)

AWS_S3_OBJECT_PARAMETERS = {
    'CacheControl': 'max-age=86400',
}
#StaticRootS3BotoStorage = lambda: S3Boto3Storage(location='root')
#MediaRootS3BotoStorage  = lambda: S3Boto3Storage(location='media')

#STATICFILES_STORAGE = 'myproject.s3utils.StaticRootS3BotoStorage'
#DEFAULT_FILE_STORAGE = 'myproject.s3utils.MediaRootS3BotoStorage'

#
# STATICFILES_DIRS = [
#     os.path.join(BASE_DIR, 'myapi/static'),
# ]


prod_db  =  dj_database_url.config(conn_max_age=500)
DATABASES['default'].update(prod_db)

# AWS CREDENCIALS # AWS CREDENCIALS # AWS CREDENCIALS




# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

MEDIA_ROOT = os.path.join(BASE_DIR, 'media/')
MEDIA_URL = 'media/'

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/
###PROJECT_ROOT   =   os.path.join(os.path.abspath(__file__))
###PROJECT_ROOT = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
###STATIC_ROOT  =   os.path.join(PROJECT_ROOT, 'staticfiles')
###STATIC_URL = '/static/'

# Extra lookup directories for collectstatic to find static files
###STATICFILES_DIRS = (
###    os.path.join(PROJECT_ROOT, 'static'),
###)

#  Add configuration for static files storage using whitenoise
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

